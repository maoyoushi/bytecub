server.port=8080
spring.datasource.url=jdbc:mysql://rm-2zee36dle7483v4nr.mysql.rds.aliyuncs.com:3306/bytecub?serverTimezone=Asia/Shanghai&useUnicode=true&characterEncoding=UTF-8&useSSL=false
spring.datasource.driverClassName=com.mysql.jdbc.Driver
spring.datasource.username=bytecub
spring.datasource.password=bytecub@20210121

mybatis.type-aliases-package=com.bytecub.mdm.dao
mybatis.mapper-locations=classpath:mapper/*.xml
spring.logging.config=classpath:logback.xml
logging.config= classpath:logback.xml
debug=true

#region mybatis config
mybatis.basePackage=com.bytecub.mdm.dao.dal
mybatis.model=com.bytecub.mdm.dao.po
mybatis.show.sql=true
mybatis.sql.timeout=10000
mybatis.heartbeat.hout=1
mybatis.page.rowBoundsWithCount=true
#endregion
#这个值除非机器设备设置，不然不要动，最多改后面的端口号
bytecub.mqtt.client.url = tcp://127.0.0.1:1883
bytecub.mqtt.client.timeout = 30
#30s
bytecub.mqtt.client.keepalive = 30

#设备超时没有ping消息的最大时间，超过这个时间就人为设备离线
#出现这种情况，只能是设备内嵌程序死锁导致，因为网络异常关闭会及时响应的
# 这个时间必须和设备本身于服务端的ping时间一致(不得小于设备的ping时间，要不然会出现异常)
# 单位 ms
bytecub.device.ping.expire = 120000

# 冗余，可能以后会用到
bytecub.mqtt.broker.id= broker-1
##非ssl模式是否启动
bytecub.mqtt.broker.normal-enable= true
##ssl模式是否启动
bytecub.mqtt.broker.ssl-enable= true
bytecub.mqtt.broker.port= 1883
bytecub.mqtt.broker.ssl-port= 8885
# SSL密钥文件密码
bytecub.mqtt.broker.ssl-password= 123456
# websocket端口
bytecub.mqtt.broker.websocket-ssl-port= 9995
# websocket path 值
bytecub.mqtt.broker.websocket-path= /mqtt
# 心跳时间(秒)
bytecub.mqtt.broker.keep-alive= 300
# 开启epoll模式, linux下建议开启
bytecub.mqtt.broker.use-epoll= true
bytecub.mqtt.broker.so-back-log= 128
#mqtt客户端密钥验证超时有效期，单位ms，等于-1时标识永不过期
bytecub.mqtt.broker.password-expired= -1

spring.elasticsearch.rest.uris= 172.17.57.16:9200
bytecub.es.shards= 1
bytecub.es.replicas= 0
#默认是1s刷新
bytecub.es.refresh=10s

#redis start#
spring.redis.host=r-2zea1403d8495774.redis.rds.aliyuncs.com
spring.redis.port=6379
#spring.redis.password=Byte1234!
spring.redis.database=1
spring.redis.pool.max-active=300
spring.redis.pool.max-idle=30
spring.redis.pool.max-wait=3000
spring.redis.pool.min-idle=0
#redis end#

#定时任务
##https://www.bejson.com/othertools/cron/
#每10分钟执行
bc.job.cron.devicestatus=0 0/1 * * * ?
# bc.job.cron.devicestatus=0/5 * * * * ?
#定时任务结束

logging.level.com.bytecub.mdm.dao=debug
  


